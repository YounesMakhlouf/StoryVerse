# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  team_members_file: '%kernel.project_dir%/data/team.json'
  avatar_directory: '%kernel.project_dir%/public/uploads/avatar_directory'
  story_directory : '%kernel.project_dir%/public/uploads/story_directory'
  story_genres:
    'Horror': >
      A story designed to scare the pants off of the reader. Whether it's a haunted house or a creepy clown, make sure to give plenty of descriptive details to create an eerie atmosphere
    'Fiction': >
      A world where anything is possible, from flying cars to intergalactic space travel. Just make sure to include lots of futuristic technology and some kind of evil villain threatening to destroy the universe
    'Mystery': >
      Who killed the wealthy business tycoon? Was it the suspicious butler or the jilted lover with a motive? The reader will be on the edge of their seat trying to figure it out
    'Comedy': >
      The goal here is to make the reader laugh out loud. Think witty one-liners and absurd situations that will have them rolling on the floor
    'Drama': >
      This genre is all about intense emotions and complex relationships. Whether it's a family feud or a tragic love triangle, the reader will be invested in the characters' lives and rooting for a happy ending
    'Romance': >
      When two people love each other very much and want to spend the rest of their lives together, but they keep getting interrupted by ridiculous obstacles like a jealous ex or a family feud
  max_stories_per_page: 9

services:
  Symfony\Bridge\Twig\Mime\TemplatedEmail:
    autowire: true
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  App\Service\QuestManager:
    arguments:
      - '@doctrine.orm.entity_manager'

  App\EventListener\QuestActionListener:
    tags:
      - { name: 'kernel.event_subscriber' }

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'

  App\Service\FileUploader:
    arguments:
      $targetDirectory: '%avatar_directory%'

  App\Controller\HomeController:
    arguments:
      $teamMembersFile: '%team_members_file%'
